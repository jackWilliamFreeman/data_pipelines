USE SCHEMA play_area.play_schema;

CREATE OR REPLACE TABLE SOURCE_DATA(ID INT, FIRST_NAME VARCHAR(1000), LAST_NAME VARCHAR(1000), MODIFIED_ON TIMESTAMP_LTZ, ROW_HASH NUMBER(19,0));

CREATE OR REPLACE
TABLE SOURCE_DATA_DIM(
ID INT,
FIRST_NAME VARCHAR(1000),
LAST_NAME VARCHAR(1000),
MODIFIED_ON TIMESTAMP_LTZ,
ROW_HASH NUMBER(19,0),
RECORD_ACTIVE_FROM TIMESTAMP_LTZ,
RECORD_ACTIVE_TO TIMESTAMP_LTZ,
RECORD_ACTIVE_FLAG VARCHAR(100),
RECORD_MODIFIED TIMESTAMP_LTZ
);


INSERT INTO SOURCE_DATA (ID, FIRST_NAME, LAST_NAME, MODIFIED_ON)
VALUES
(1, 'JACK','FREEMAN', TO_TIMESTAMP('2022-01-01')),
(2, 'CAITLIN','COLLINS', TO_TIMESTAMP('2022-02-01')),
(3, 'LENNY', 'FREEMAN', TO_TIMESTAMP('2022-02-01')),
(1, 'JACK', 'FREEMAN2', TO_TIMESTAMP('2022-02-01'));

UPDATE SOURCE_DATA SET ROW_HASH = HASH(ID, FIRST_NAME, LAST_NAME, MODIFIED_ON) WHERE ROW_HASH IS NULL;

SELECT * FROM SOURCE_DATA;

CREATE OR REPLACE TEMPORARY TABLE SOURCE_CHANGES AS (
WITH SRC_CTE AS (
SELECT
	SRC.*,
	SRC.MODIFIED_ON RECORD_ACTIVE_FROM,
	LEAD(SRC.MODIFIED_ON,1,TO_TIMESTAMP_LTZ('2099-12-31T23:59:59.999+08:00')) OVER (PARTITION BY SRC.ID ORDER BY SRC.MODIFIED_ON) RECORD_ACTIVE_TO,
	CASE 
		WHEN TGT.ROW_HASH IS NULL THEN 'I'
		WHEN SRC.ROW_HASH <> TGT.ROW_HASH THEN 'U'
	END AS DML_TYPE,
	TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP) RECORD_MODIFIED
FROM SOURCE_DATA SRC
LEFT OUTER JOIN SOURCE_DATA_DIM TGT ON TGT.ID = SRC.ID 
WHERE (SRC.ROW_HASH <> TGT.ROW_HASH -- CHANGES
	OR TGT.ROW_HASH IS NULL) --INSERTS
	AND SRC.MODIFIED_ON > COALESCE(TGT.MODIFIED_ON,'1900-01-01')
	)
--DO THIS FINAL CTE TO DETERMINE ACTIVE RECORDS
SELECT * 
	,CASE WHEN RECORD_ACTIVE_TO >= TO_TIMESTAMP_LTZ('2099-12-31 23:59:59+08:00') THEN 'Y' ELSE 'N' END AS RECORD_ACTIVE_FLAG
FROM SRC_CTE 
);

SELECT * FROM SOURCE_CHANGES;

UPDATE SOURCE_DATA_DIM AS TGT 
SET
	TGT.RECORD_MODIFIED = TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP),
	TGT.RECORD_ACTIVE_TO = SRC.RECORD_MODIFIED,
	TGT.RECORD_ACTIVE_FLAG = 'N'
	FROM SOURCE_CHANGES SRC 
	WHERE TGT.RECORD_ACTIVE_FLAG = 'Y' 
	AND SRC.DML_TYPE = 'U'
	AND TGT.ID = SRC.ID;
	
INSERT INTO PLAY_AREA.PLAY_SCHEMA.SOURCE_DATA_DIM (ID, FIRST_NAME, LAST_NAME, MODIFIED_ON, ROW_HASH, RECORD_ACTIVE_FROM, RECORD_ACTIVE_TO, RECORD_ACTIVE_FLAG, RECORD_MODIFIED)
SELECT ID, FIRST_NAME, LAST_NAME, MODIFIED_ON, ROW_HASH, RECORD_ACTIVE_FROM, RECORD_ACTIVE_TO, RECORD_ACTIVE_FLAG, RECORD_MODIFIED FROM SOURCE_CHANGES;


-----------------------------------------------------
-- single record UPDATE 
CREATE OR REPLACE TABLE SOURCE_DATA(ID INT, FIRST_NAME VARCHAR(1000), LAST_NAME VARCHAR(1000), MODIFIED_ON TIMESTAMP_LTZ, ROW_HASH NUMBER(19,0));
INSERT INTO SOURCE_DATA (ID, FIRST_NAME, LAST_NAME, MODIFIED_ON)
VALUES
(2, 'CAITLIN','FREEMAN', TO_TIMESTAMP('2022-03-01'));

UPDATE SOURCE_DATA SET ROW_HASH = HASH(ID, FIRST_NAME, LAST_NAME, MODIFIED_ON) WHERE ROW_HASH IS NULL;

SELECT * FROM SOURCE_DATA;
SELECT * FROM SOURCE_DATA_DIM; 

CREATE OR REPLACE TEMPORARY TABLE SOURCE_CHANGES AS (
WITH SRC_CTE AS (
SELECT
	SRC.*,
	SRC.MODIFIED_ON RECORD_ACTIVE_FROM,
	LEAD(SRC.MODIFIED_ON,1,TO_TIMESTAMP_LTZ('2099-12-31T23:59:59.999+08:00')) OVER (PARTITION BY SRC.ID ORDER BY SRC.MODIFIED_ON) RECORD_ACTIVE_TO,
	CASE 
		WHEN TGT.ROW_HASH IS NULL THEN 'I'
		WHEN SRC.ROW_HASH <> TGT.ROW_HASH THEN 'U'
	END AS DML_TYPE,
	TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP) RECORD_MODIFIED,
	RANK() OVER(PARTITION BY SRC.ID ORDER BY SRC.MODIFIED_ON) AS SEQUENCE_RANK
FROM SOURCE_DATA SRC
LEFT OUTER JOIN SOURCE_DATA_DIM TGT ON TGT.ID = SRC.ID 
WHERE (SRC.ROW_HASH <> TGT.ROW_HASH -- CHANGES
	OR TGT.ROW_HASH IS NULL) --INSERTS
)
--DO THIS FINAL CTE TO DETERMINE ACTIVE RECORDS
SELECT * 
	,CASE WHEN RECORD_ACTIVE_TO >= TO_TIMESTAMP_LTZ('2099-12-31 23:59:59+08:00') THEN 'Y' ELSE 'N' END AS RECORD_ACTIVE_FLAG
FROM SRC_CTE 
);


UPDATE SOURCE_DATA_DIM AS TGT 
SET
	TGT.RECORD_MODIFIED = TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP),
	TGT.RECORD_ACTIVE_TO = SRC.RECORD_ACTIVE_FROM,
	TGT.RECORD_ACTIVE_FLAG = 'N'
	FROM SOURCE_CHANGES SRC 
	WHERE TGT.RECORD_ACTIVE_FLAG = 'Y' 
	AND SRC.DML_TYPE = 'U'
	AND TGT.ID = SRC.ID
	AND SRC.SEQUENCE_RANK = 1;
	 
INSERT
	INTO
	PLAY_AREA.PLAY_SCHEMA.SOURCE_DATA_DIM (ID,
	FIRST_NAME,
	LAST_NAME,
	MODIFIED_ON,
	ROW_HASH,
	RECORD_ACTIVE_FROM,
	RECORD_ACTIVE_TO,
	RECORD_ACTIVE_FLAG,
	RECORD_MODIFIED)
SELECT
	ID,
	FIRST_NAME,
	LAST_NAME,
	MODIFIED_ON,
	ROW_HASH,
	RECORD_ACTIVE_FROM,
	RECORD_ACTIVE_TO,
	RECORD_ACTIVE_FLAG,
	RECORD_MODIFIED
FROM
	SOURCE_CHANGES;

SELECT * FROM PLAY_AREA.PLAY_SCHEMA.SOURCE_DATA_DIM; 


-----------------------------------------------------
-- three records at once
CREATE OR REPLACE TABLE SOURCE_DATA(ID INT, FIRST_NAME VARCHAR(1000), LAST_NAME VARCHAR(1000), MODIFIED_ON TIMESTAMP_LTZ, ROW_HASH NUMBER(19,0));
INSERT INTO SOURCE_DATA (ID, FIRST_NAME, LAST_NAME, MODIFIED_ON)
VALUES
(3, 'LENNY','COLLINS - FREEMAN', TO_TIMESTAMP('2022-04-01')),
(3, 'LENNY','COLLINS', TO_TIMESTAMP('2022-05-01')),
(3, 'LENNY','WONDER DOG', TO_TIMESTAMP('2022-06-01'))
;

UPDATE SOURCE_DATA SET ROW_HASH = HASH(ID, FIRST_NAME, LAST_NAME, MODIFIED_ON) WHERE ROW_HASH IS NULL;

SELECT * FROM SOURCE_DATA; 

CREATE OR REPLACE TEMPORARY TABLE SOURCE_CHANGES AS (
WITH SRC_CTE AS (
SELECT
	SRC.*,
	SRC.MODIFIED_ON RECORD_ACTIVE_FROM,
	LEAD(SRC.MODIFIED_ON,1,TO_TIMESTAMP_LTZ('2099-12-31T23:59:59.999+08:00')) OVER (PARTITION BY SRC.ID ORDER BY SRC.MODIFIED_ON) RECORD_ACTIVE_TO,
	CASE 
		WHEN TGT.ROW_HASH IS NULL THEN 'I'
		WHEN SRC.ROW_HASH <> TGT.ROW_HASH THEN 'U'
	END AS DML_TYPE,
	TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP) RECORD_MODIFIED,
	RANK() OVER(PARTITION BY SRC.ID ORDER BY SRC.MODIFIED_ON) AS SEQUENCE_RANK
FROM SOURCE_DATA SRC
LEFT OUTER JOIN SOURCE_DATA_DIM TGT ON TGT.ID = SRC.ID 
WHERE (SRC.ROW_HASH <> TGT.ROW_HASH -- CHANGES
	OR TGT.ROW_HASH IS NULL) --INSERTS
)
--DO THIS FINAL CTE TO DETERMINE ACTIVE RECORDS
SELECT * 
	,CASE WHEN RECORD_ACTIVE_TO >= TO_TIMESTAMP_LTZ('2099-12-31 23:59:59+08:00') THEN 'Y' ELSE 'N' END AS RECORD_ACTIVE_FLAG
FROM SRC_CTE 
);

SELECT * FROM SOURCE_CHANGES ;

UPDATE SOURCE_DATA_DIM AS TGT 
SET
	TGT.RECORD_MODIFIED = TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP),
	TGT.RECORD_ACTIVE_TO = SRC.RECORD_ACTIVE_FROM,
	TGT.RECORD_ACTIVE_FLAG = 'N'
	FROM SOURCE_CHANGES SRC 
	WHERE TGT.RECORD_ACTIVE_FLAG = 'Y' 
	AND SRC.DML_TYPE = 'U'
	AND TGT.ID = SRC.ID AND SRC.SEQUENCE_RANK = 1;
	
INSERT
	INTO
	PLAY_AREA.PLAY_SCHEMA.SOURCE_DATA_DIM (ID,
	FIRST_NAME,
	LAST_NAME,
	MODIFIED_ON,
	ROW_HASH,
	RECORD_ACTIVE_FROM,
	RECORD_ACTIVE_TO,
	RECORD_ACTIVE_FLAG,
	RECORD_MODIFIED)
SELECT
	ID,
	FIRST_NAME,
	LAST_NAME,
	MODIFIED_ON,
	ROW_HASH,
	RECORD_ACTIVE_FROM,
	RECORD_ACTIVE_TO,
	RECORD_ACTIVE_FLAG,
	RECORD_MODIFIED
FROM
	SOURCE_CHANGES;
	
SELECT * FROM SOURCE_DATA_DIM ;




--students db example:

CREATE OR REPLACE TEMPORARY TABLE SOURCE_CHANGES AS (
WITH SRC_CTE AS (
SELECT
	SRC.*,
	COALESCE(SRC.MODIFIED_ON, SRC.CREATED_ON) RECORD_ACTIVE_FROM,
	LEAD(SRC.MODIFIED_ON,1,TO_TIMESTAMP_LTZ('2099-12-31T23:59:59.999+08:00')) OVER (PARTITION BY SRC.ID ORDER BY SRC.MODIFIED_ON) RECORD_ACTIVE_TO,
	TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP) RECORD_MODIFIED,
	RANK() OVER(PARTITION BY SRC.ID ORDER BY SRC.MODIFIED_ON) AS SEQUENCE_RANK
FROM STUDENTS_STG_CHANGES SRC
	)
--DO THIS FINAL CTE TO DETERMINE ACTIVE RECORDS
SELECT 
	SRC.* 
	,CASE WHEN RECORD_ACTIVE_TO >= TO_TIMESTAMP_LTZ('2099-12-31 23:59:59+08:00') THEN 'Y' ELSE 'N' END AS RECORD_ACTIVE_FLAG,
	CASE 
		WHEN TGT.RECORD_HASH IS NULL THEN 'I'
		WHEN SRC.ROW_HASH <> TGT.RECORD_HASH THEN 'U'
	END AS DML_TYPE
FROM SRC_CTE SRC
LEFT OUTER JOIN STUDENTS_DIM TGT ON TGT.ID = SRC.ID AND SRC.SEQUENCE_RANK = 1 AND TGT.RECORD_ACTIVE_FLAG = 'Y'
WHERE (
	SRC.ROW_HASH <> TGT.RECORD_HASH  -- CHANGES
	OR TGT.RECORD_HASH  IS NULL --INSERTS
) 
);


UPDATE STUDENTS_DIM  AS TGT 
SET
	TGT.RECORD_MODIFIED_TS  = TO_TIMESTAMP_LTZ(CURRENT_TIMESTAMP),
	TGT.RECORD_ACTIVE_TO_TS = SRC.RECORD_ACTIVE_FROM,
	TGT.RECORD_ACTIVE_FLAG = 'N'
	FROM SOURCE_CHANGES SRC 
	WHERE TGT.RECORD_ACTIVE_FLAG = 'Y' 
	AND SRC.DML_TYPE = 'U'
	AND TGT.ID = SRC.ID AND SRC.SEQUENCE_RANK = 1;
	
INSERT
	INTO
	STUDENTS_DIM ( 
	ID,
	FIRST_NAME,
	LAST_NAME,
	CREATED_BY,
	CREATED_ON,
	MODIFIED_BY,
	MODIFIED_ON,
	RECORD_HASH,
	RECORD_ACTIVE_FROM_TS,
	RECORD_ACTIVE_TO_TS,
	RECORD_ACTIVE_FLAG,
	RECORD_MODIFIED_TS
	)
SELECT
	ID,
	FIRST_NAME,
	LAST_NAME,
	CREATED_BY,
	CREATED_ON,
	MODIFIED_BY,
	MODIFIED_ON,
	ROW_HASH,
	RECORD_ACTIVE_FROM,
	RECORD_ACTIVE_TO,
	RECORD_ACTIVE_FLAG,
	RECORD_MODIFIED
FROM
	SOURCE_CHANGES;